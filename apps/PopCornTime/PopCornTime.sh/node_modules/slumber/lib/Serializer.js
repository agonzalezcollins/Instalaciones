// Generated by CoffeeScript 1.10.0
(function() {
  var BaseSerializer, JsonSerializer, SERIALIZERS, YamlSerializer, debug, yamljs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  debug = require('debug')('slumber:Serializer');

  BaseSerializer = (function() {
    BaseSerializer.prototype.content_types = null;

    BaseSerializer.prototype.key = null;

    function BaseSerializer() {
      this.dumps = bind(this.dumps, this);
      this.loads = bind(this.loads, this);
      this.get_content_type = bind(this.get_content_type, this);
      this.debug = require('debug')("slumber:" + this.constructor.name);
      this.debug('constructor');
    }

    BaseSerializer.prototype.get_content_type = function() {
      if (this.content_types == null) {
        throw 'Not Implemented';
      }
      return this.content_types[0];
    };

    BaseSerializer.prototype.loads = function(data) {
      throw 'Not Implemented';
    };

    BaseSerializer.prototype.dumps = function(data) {
      throw 'Not Implemented';
    };

    return BaseSerializer;

  })();

  SERIALIZERS = module.exports.SERIALIZERS = {};

  JsonSerializer = (function(superClass) {
    extend(JsonSerializer, superClass);

    function JsonSerializer() {
      this.dumps = bind(this.dumps, this);
      this.loads = bind(this.loads, this);
      return JsonSerializer.__super__.constructor.apply(this, arguments);
    }

    JsonSerializer.prototype.content_types = ['application/json', 'application/x-javascript', 'text/javascript', 'text/x-javascript', 'text/x-json'];

    JsonSerializer.prototype.key = 'json';

    JsonSerializer.prototype.loads = function(data) {
      if (typeof data === 'string') {
        return JSON.parse(data);
      }
      return data;
    };

    JsonSerializer.prototype.dumps = function(data) {
      return JSON.stringify(data);
    };

    return JsonSerializer;

  })(BaseSerializer);

  SERIALIZERS.json = JsonSerializer;

  try {
    yamljs = require('yamljs');
    YamlSerializer = (function(superClass) {
      extend(YamlSerializer, superClass);

      function YamlSerializer() {
        this.dumps = bind(this.dumps, this);
        this.loads = bind(this.loads, this);
        return YamlSerializer.__super__.constructor.apply(this, arguments);
      }

      YamlSerializer.prototype.content_types = ['text/yaml'];

      YamlSerializer.prototype.key = 'yaml';

      YamlSerializer.prototype.loads = function(data) {
        return yamljs.parse(data);
      };

      YamlSerializer.prototype.dumps = function(data) {
        return yamljs.stringify(data);
      };

      return YamlSerializer;

    })(BaseSerializer);
    SERIALIZERS.yaml = YamlSerializer;
  } catch (undefined) {}

  module.exports.Serializer = (function() {
    function Serializer(_default, serializers) {
      var i, key, len, obj, serializer;
      this["default"] = _default != null ? _default : 'json';
      if (serializers == null) {
        serializers = null;
      }
      this.get_content_type = bind(this.get_content_type, this);
      this.dumps = bind(this.dumps, this);
      this.loads = bind(this.loads, this);
      this.get_serializer = bind(this.get_serializer, this);
      debug('constructor', "@default=" + this["default"], "serializers=" + serializers);
      if (serializers == null) {
        serializers = [
          (function() {
            var results;
            results = [];
            for (key in SERIALIZERS) {
              obj = SERIALIZERS[key];
              results.push(new obj);
            }
            return results;
          })()
        ][0];
      }
      if (!serializers) {
        throw 'There are no available serializers.';
      }
      this.serializers = {};
      for (i = 0, len = serializers.length; i < len; i++) {
        serializer = serializers[i];
        this.serializers[serializer.key] = serializer;
      }
    }

    Serializer.prototype.get_serializer = function(name, content_type) {
      var ctype, i, len, ref, ref1, serializer, serializer_name;
      if (name == null) {
        name = null;
      }
      if (content_type == null) {
        content_type = null;
      }
      if (name === null && content_type === null) {
        return this.serializers[this["default"]];
      }
      if (name != null) {
        if (this.serializers[name] == null) {
          throw name + " is not an available serializer";
        }
        return this.serializers[name];
      }
      if (content_type != null) {
        ref = this.serializers;
        for (serializer_name in ref) {
          serializer = ref[serializer_name];
          ref1 = serializer.content_types;
          for (i = 0, len = ref1.length; i < len; i++) {
            ctype = ref1[i];
            if (content_type === ctype) {
              return serializer;
            }
          }
        }
        throw "there is no available serializer for content-type " + content_type;
      }
    };

    Serializer.prototype.loads = function(data, format) {
      var s;
      if (format == null) {
        format = null;
      }
      s = this.get_serializer(format);
      return s.loads(data);
    };

    Serializer.prototype.dumps = function(data, format) {
      var s;
      if (format == null) {
        format = null;
      }
      s = this.get_serializer(format);
      return s.dumps(data);
    };

    Serializer.prototype.get_content_type = function(format) {
      var s;
      if (format == null) {
        format = null;
      }
      s = this.get_serializer(format);
      return s.get_content_type();
    };

    return Serializer;

  })();

}).call(this);
