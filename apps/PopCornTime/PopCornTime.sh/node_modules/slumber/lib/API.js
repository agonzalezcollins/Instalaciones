// Generated by CoffeeScript 1.10.0
(function() {
  var API, Serializer, append_slash, callable, debug, hasInsensitive, merge, querystring, ref, request,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  querystring = require('querystring');

  debug = require('debug')('slumber:api');

  ref = require('./utils'), callable = ref.callable, append_slash = ref.append_slash, merge = ref.merge, hasInsensitive = ref.hasInsensitive;

  request = require('request');

  Serializer = require('./Serializer').Serializer;

  API = callable((function() {
    function _Class(base_url, opts1, fn) {
      var base, base1, base2, base3, base4;
      this.opts = opts1 != null ? opts1 : {};
      if (fn == null) {
        fn = null;
      }
      this.patch = bind(this.patch, this);
      this.put = bind(this.put, this);
      this.postForm = bind(this.postForm, this);
      this.post = bind(this.post, this);
      this["delete"] = bind(this["delete"], this);
      this.get = bind(this.get, this);
      this.wrap_response = bind(this.wrap_response, this);
      this._prepare_opts = bind(this._prepare_opts, this);
      this._request = bind(this._request, this);
      this._construct_request = bind(this._construct_request, this);
      this._try_to_serialize = bind(this._try_to_serialize, this);
      this._create_child = bind(this._create_child, this);
      if (base_url != null) {
        this.opts.base_url = base_url;
      }
      if ((base = this.opts).append_slash == null) {
        base.append_slash = true;
      }
      if ((base1 = this.opts).auth == null) {
        base1.auth = null;
      }
      if ((base2 = this.opts).request_opts == null) {
        base2.request_opts = {
          rejectUnauthorized: false
        };
      }
      if ((base3 = this.opts).format == null) {
        base3.format = 'json';
      }
      this.serializer = (base4 = this.opts).serializer != null ? base4.serializer : base4.serializer = new Serializer(this.opts.format);
      if (this.opts.append_slash) {
        this.opts.base_url = append_slash(this.opts.base_url);
      }
      this.base_url = this.opts.base_url;
      if (!this.opts.base_url) {
        throw "base_url is required";
      }
      process.nextTick(function() {
        if (fn) {
          return fn(this);
        }
      });
      return this;
    }

    _Class.prototype._create_child = function(path) {
      var callable_api, child, new_base_url;
      new_base_url = "" + (append_slash(this.base_url)) + path;
      callable_api = API;
      child = new callable_api(new_base_url, this.opts);
      return child;
    };

    _Class.prototype._try_to_serialize = function(response, body) {
      var content_type, e, error, stype;
      if (response.headers['content-type'] != null) {
        content_type = response.headers['content-type'].split(';')[0].replace(/^\s*|\s*$/g, '');
        try {
          stype = this.serializer.get_serializer(null, content_type);
        } catch (error) {
          e = error;
          return body;
        }
        return stype.loads(body);
      }
      return body;
    };

    _Class.prototype._construct_request = function(method, kwargs) {
      var base, defaultVersion, key, prop, ref1, ref2, request_options, value;
      request_options = {
        url: this.base_url,
        method: method,
        headers: {}
      };
      if (this.opts.headers != null) {
        request_options.headers = merge(request_options.headers, this.opts.headers);
      }
      if (kwargs.headers != null) {
        request_options.headers = merge(request_options.headers, kwargs.headers);
      }
      ref1 = this.opts.request_opts;
      for (key in ref1) {
        value = ref1[key];
        if (request_options[key] == null) {
          request_options[key] = value;
        }
      }
      if ((base = request_options.headers).accept == null) {
        base.accept = this.serializer.get_serializer().get_content_type();
      }
      if (Object.keys(kwargs.args).length !== 0) {
        request_options.url += '?' + querystring.stringify(kwargs.args);
      } else {
        if (request_options.url.substr(-1) === '/') {
          request_options.url = request_options.url.substr(0, request_options.url.length - 1);
        }
      }
      if (kwargs.data != null) {
        prop = 'json';
        if (((ref2 = kwargs.headers) != null ? ref2['content-type'] : void 0) === 'application/x-www-form-urlencoded') {
          prop = 'form';
        }
        request_options[prop] = kwargs.data;
      }
      if (kwargs.formData != null) {
        request_options.formData = kwargs.formData;
      }
      if (this.opts.auth) {
        request_options.auth = {
          user: this.opts.auth[0],
          pass: this.opts.auth[1],
          sentImmediately: true
        };
      }
      if (this.opts.proxy) {
        request_options.proxy = opts.proxy;
      }
      if (!hasInsensitive(request_options.headers, 'user-agent')) {
        defaultVersion = require('../package.json').version;
        request_options.headers['User-Agent'] = "node-slumber/" + defaultVersion;
      }
      return request_options;
    };

    _Class.prototype._request = function(method, kwargs, fn) {
      var req, request_options;
      request_options = this._construct_request(method, kwargs);
      debug("" + method, request_options.url);
      return req = request(request_options, fn);
    };

    _Class.prototype.callable = _Class.prototype._create_child;

    _Class.prototype._prepare_opts = function(from, default_dest) {
      var k, key, section, to, translation, v, value;
      if (default_dest == null) {
        default_dest = 'args';
      }
      to = {
        args: {},
        data: {},
        formData: {}
      };
      translation = {
        query: 'args'
      };
      for (key in from) {
        value = from[key];
        if (key.slice(0, 2) === '__') {
          section = key.slice(2);
          if (translation[section] != null) {
            section = translation[section];
          }
          for (k in value) {
            v = value[k];
            to[section][k] = v;
          }
        } else if (key === 'headers') {
          to.headers = value;
        } else {
          to[default_dest][key] = value;
        }
      }
      return to;
    };

    _Class.prototype.wrap_response = function(fn, err, response, ret) {
      switch (fn.length) {
        case 1:
          return fn(ret);
        case 2:
          return fn(err, ret);
        case 3:
          return fn(err, response, ret);
      }
    };

    _Class.prototype.get = function(query, fn) {
      var handle, opts, resp;
      if ('function' === typeof query) {
        fn = query;
        query = {};
      }
      if (fn == null) {
        throw Error('Missing callback');
      }
      opts = this._prepare_opts(query, 'args');
      handle = (function(_this) {
        return function(err, response, body) {
          var ref1;
          if (err) {
            return _this.wrap_response(fn, err, null, null);
          }
          if ((200 <= (ref1 = response.statusCode) && ref1 <= 299)) {
            return _this.wrap_response(fn, err, response, _this._try_to_serialize(response, body));
          } else if (response != null ? response.statusCode : void 0) {
            return _this.wrap_response(fn, {
              "statusCode": response.statusCode
            }, response, null);
          } else {
            return _this.wrap_response(fn, true, response, null);
          }
        };
      })(this);
      return resp = this._request('GET', opts, handle);
    };

    _Class.prototype["delete"] = function(query, fn) {
      var handle, opts, resp;
      if ('function' === typeof query) {
        fn = query;
        query = {};
      }
      if (fn == null) {
        throw Error('Missing callback');
      }
      opts = this._prepare_opts(query, 'args');
      handle = (function(_this) {
        return function(err, response, body) {
          var ref1;
          if ((200 <= (ref1 = response.statusCode) && ref1 <= 299)) {
            if (response.statusCode === 204) {
              return _this.wrap_response(fn, err, response, true);
            } else {
              return _this.wrap_response(fn, err, response, true);
            }
          } else {
            return _this.wrap_response(fn, true, response, false);
          }
        };
      })(this);
      return resp = this._request('DELETE', opts, handle);
    };

    _Class.prototype.post = function(data, fn) {
      var handle, opts, resp;
      if (fn == null) {
        throw Error('Missing callback');
      }
      opts = this._prepare_opts(data, 'data');
      handle = (function(_this) {
        return function(err, response, body) {
          var ref1;
          if ((200 <= (ref1 = response.statusCode) && ref1 <= 299)) {
            return _this.wrap_response(fn, err, response, _this._try_to_serialize(response, body));
          }
          return _this.wrap_response(fn, err, response, true);
        };
      })(this);
      return resp = this._request('POST', opts, handle);
    };

    _Class.prototype.postForm = function(formData, fn) {
      var handle, opts, resp;
      if (fn == null) {
        throw Error('Missing callback');
      }
      opts = this._prepare_opts(formData, 'formData');
      handle = (function(_this) {
        return function(err, response, body) {
          var ref1;
          if ((200 <= (ref1 = response.statusCode) && ref1 <= 299)) {
            return _this.wrap_response(fn, err, response, _this._try_to_serialize(response, body));
          }
          return _this.wrap_response(fn, err, response, true);
        };
      })(this);
      return resp = this._request('POST', opts, handle);
    };

    _Class.prototype.put = function(data, fn) {
      var handle, opts, resp;
      if (fn == null) {
        throw Error('Missing callback');
      }
      opts = this._prepare_opts(data, 'data');
      handle = (function(_this) {
        return function(err, response, body) {
          var ref1;
          if ((200 <= (ref1 = response.statusCode) && ref1 <= 299)) {
            return _this.wrap_response(fn, err, response, _this._try_to_serialize(response, body));
          }
          return _this.wrap_response(fn, true, response, null);
        };
      })(this);
      return resp = this._request('PUT', opts, handle);
    };

    _Class.prototype.patch = function(data, fn) {
      var handle, opts, resp;
      if (fn == null) {
        throw Error('Missing callback');
      }
      opts = this._prepare_opts(data, 'data');
      handle = (function(_this) {
        return function(err, response, body) {
          var ref1;
          if ((200 <= (ref1 = response.statusCode) && ref1 <= 299)) {
            return _this.wrap_response(fn, err, response, _this._try_to_serialize(response, body));
          }
          return _this.wrap_response(fn, err, response, true);
        };
      })(this);
      return resp = this._request('PATCH', opts, handle);
    };

    return _Class;

  })());

  module.exports = API;

}).call(this);
