{
  "_args": [
    [
      {
        "raw": "butter-provider@git+https://github.com/butterproviders/butter-provider.git",
        "scope": null,
        "escapedName": "butter-provider",
        "name": "butter-provider",
        "rawSpec": "git+https://github.com/butterproviders/butter-provider.git",
        "spec": "git+https://github.com/butterproviders/butter-provider.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:butterproviders/butter-provider.git",
          "sshUrl": "git+ssh://git@github.com/butterproviders/butter-provider.git",
          "httpsUrl": "git+https://github.com/butterproviders/butter-provider.git",
          "gitUrl": "git://github.com/butterproviders/butter-provider.git",
          "shortcut": "github:butterproviders/butter-provider",
          "directUrl": "https://raw.githubusercontent.com/butterproviders/butter-provider/master/package.json"
        }
      },
      "/var/lib/jenkins/workspace/Popcorn-Time-Desktop"
    ]
  ],
  "_from": "git+https://github.com/butterproviders/butter-provider.git",
  "_id": "butter-provider@0.4.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/butter-provider",
  "_phantomChildren": {
    "d": "0.1.1",
    "es5-ext": "0.10.12",
    "es6-weak-map": "0.1.4",
    "event-emitter": "0.3.4",
    "lru-queue": "0.1.0",
    "next-tick": "0.2.2",
    "timers-ext": "0.1.0"
  },
  "_requested": {
    "raw": "butter-provider@git+https://github.com/butterproviders/butter-provider.git",
    "scope": null,
    "escapedName": "butter-provider",
    "name": "butter-provider",
    "rawSpec": "git+https://github.com/butterproviders/butter-provider.git",
    "spec": "git+https://github.com/butterproviders/butter-provider.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:butterproviders/butter-provider.git",
      "sshUrl": "git+ssh://git@github.com/butterproviders/butter-provider.git",
      "httpsUrl": "git+https://github.com/butterproviders/butter-provider.git",
      "gitUrl": "git://github.com/butterproviders/butter-provider.git",
      "shortcut": "github:butterproviders/butter-provider",
      "directUrl": "https://raw.githubusercontent.com/butterproviders/butter-provider/master/package.json"
    }
  },
  "_requiredBy": [
    "/",
    "/butter-provider-vodo"
  ],
  "_resolved": "git+https://github.com/butterproviders/butter-provider.git#c8739b75d551c3af7be2d5b1748aec17dfba5e74",
  "_shasum": "c709cac2d08c25c452eefdc78e27690822bc08d2",
  "_shrinkwrap": null,
  "_spec": "butter-provider@git+https://github.com/butterproviders/butter-provider.git",
  "_where": "/var/lib/jenkins/workspace/Popcorn-Time-Desktop",
  "author": {
    "name": "Niv Sardi"
  },
  "bugs": {
    "url": "https://github.com/butterproviders/butter-provider/issues"
  },
  "dependencies": {
    "es6-object-assign": "^1.0.1",
    "lodash": "^3.10.1",
    "memoizee": "^0.3.9"
  },
  "description": "A base class for Butter providers",
  "devDependencies": {},
  "gitHead": "c8739b75d551c3af7be2d5b1748aec17dfba5e74",
  "homepage": "https://github.com/butterproviders/butter-provider#readme",
  "license": "GPL-3.0",
  "main": "index.js",
  "name": "butter-provider",
  "optionalDependencies": {},
  "readme": "#+TITLE: Butter Provider\n\n[[https://butterproject.org][Butter Project]] is a toolkit to build VOD plateforms, this component is the\nbase class for Providers.\n\nA =Provider= in the Butter terminology is an accesor for media content, it\nprovides items of type 'movie' or 'show' that will be displayed in a Butter\nApp.\n\nButter will automatically load any npm package installed (listed in\n=package.json=) that matches the =/butter-provider-.*/ regex.\n\n* Documentation\nA =Butter Provider= is just a npm package that needs to export a specific\nAPI that we describe hereafter.\n\nnote that if you want to use the autoload features in butter you should name\nyour module =butter-provider-${something}=\n\n** Writting a Provider\nWe provide a base provider in =butter-provider= that we recomend extending,\nit handles caching and a few other bootstrapping quirks, but formally\nspeaking it's not required.\n\nHere we'll be creating a provider for the vodo.net service.\n\n*** Create a npm module\ncreate a directory and init an new npm module:\n\n#+BEGIN_SRC shell\nmkdir butter-provider-vodo\ncd butter-provider-vodo\nnpm init\n#+END_SRC\n\n*** Depend on butter-provider\nfirst install the npm module and add it as a dependency\n\n#+BEGIN_SRC shell\nnpm i --save butter-provider\n#+END_SRC\n\nthen edit your index.js\n\n#+BEGIN_SRC javascript\n'use strict';\n\nvar GenericProvider = require('butter-provider');\nvar inherits = require('util').inherits;\n\nfunction Vodo() {\n    if (!(this instanceof Vodo)) {\n        return new Vodo();\n    }\n\n    GenericProvider.call(this);\n}\ninherits(Vodo, GenericProvider);\n#+END_SRC\n\n*** Declare a Config object\n\n#+BEGIN_SRC javascript\nVodo.prototype.config = {\n    name: 'vodo',\n    uniqueId: 'imdb_id',\n    tabName: 'Vodo',\n    type: 'movie',\n    args: {\n       urlList: Generic.ArgTypes.ARRAY\n    }\n    /* legacy: should be removed */\n    // subtitle: 'ysubs',\n    // metadata: 'trakttv:movie-metadata'\n};\n#+END_SRC\n\n*** implement required methods\nYou need to supply code for =fetch= =detail= and =extractIds= see the\nAPI documentation here after for more details\n\n** API\n*** config (Object)\n\nThe config  object should be attached to the prototype (i.e. use\nthe =Provider.prototype.config = {}= syntax), and it should have the\nfollowing fields:\n\n#+BEGIN_SRC javascript\nProvider.prototype.config = {\n     name: String,     // will be used in logs to refer to your provider\n     uniqueId: String, // the name of the field we should use to unify assets\n     tabName: String,  // Will appear as the description of the tab\n     type: Generic.TabType,\n     args: Object      // (optional) the args this provider supports\n     /* legacy: should be removed */\n     subtitle: String, // (optional) name of the subtitle provider\n     metadata: String  // (optional) name of the metadata provider\n}\n#+END_SRC\n\n**** type\nthe type element should be one of Generic.TabType, currently:\n\n#+BEGIN_SRC javascript\n    Generic.ArgType.MOVIE,   // provider has elements of type 'movie'\n    Generic.ArgType.TVSHOW,  // provider has elements of type 'tvshow'\n    Generic.ArgType.ANIME,   // will show a mix between 'movies' and 'tvshows'\n#+END_SRC\n\n**** args\nthe args object is a mapping between arg names and =Generic.ArgType= types,\ncurrently these are the supported values:\n\n#+BEGIN_SRC javascript\n    Generic.ArgType.ARRAY,   // expects a string of values separated by ','\n    Generic.ArgType.OBJECT,  // expects a string of json (JSON.parse)\n    Generic.ArgType.BOOLEAN, // expects a string that evaluates to a boolean\n    Generic.ArgType.NUMBER,  // expects a string that can be passed to Number()\n    Generic.ArgType.STRING,  // expects a string\n#+END_SRC\n\nthese types will be automatically instanciated into the =args= property of\nthe created class, in the long run, there will be UI in butter to modify\nthose declared args from the settings panels.\n\nIt is not required that you use this mechanism (i.e. you can parse your args\nas you please in your butter-provider) but it will sure save you some\nheadaches.\n\n*** fetch (Object: filters -> (promise) Object)\n\nThe fetch method takes in a set of filters that can have the following keys:\n#+BEGIN_SRC javascript\nvar filters = {\n    keywords: [String],    // keywords to search for\n    genre: String,         // limit to this genre\n    order: 'desc' | 'asc', // sort order\n    sorter: 'rating' | 'popularity' | 'name',\n    limit: Number,         // number of elements to return\n}\n#+END_SRC\n\nThe fetch method returns a promise that resolves to an object of the shape:\n#+BEGIN_SRC javascript\nvar fetchReturn = {\n    results: [Object],  // returned result items\n    hasMore: Boolean    // can the provider get more results ?\n}\n#+END_SRC\n\nThe results items have the following shape:\n#+BEGIN_SRC javascript\nvar result = {\n    [uniqueId | 'id']: String, // the unique id\n    title: String,             // title of the asset\n    year: movie.MovieYear,     // year of release\n    genre: [movie.Genre],      // a free list of genre keywords\n    rating: Number,            // a 0-100 rating value\n    image: url,                // generic image\n    cover: url,                // cover image\n    backdrop: url,             // backdrop image\n    torrents: [Object],        // torrents object\n    subtitle: {String: url},   // language -> url subs mapping\n    trailer: url,              // url of the trailer, formated for butter-streamers\n    synopsis: String,          // a short description of the asset\n    type: 'movie' | 'tvshow'   // used by the browser to decide how to show the item\n}\n#+END_SRC\n\neach torrent object has the following shape:\nnote: the 'torrent' name is a bit confusing and really a legacy name, it\nshould be called 'ressources'\n\n#+BEGIN_SRC javascript\nvar torrent = {\n   url: String,      // The resource's url, formated for butter-streamers\n   size: Number,     // The resource's descriptor size (magnet/torrent/hls playlist)\n   filesize: Number, // The resource's main video filesize\n   seed: Number,     // (optional) number of seeds\n   peer: Number      // (optional) number of peers\n}\n#+END_SRC\n\n*** detail (String: id, Object old_data -> (promise) Object)\nThe detail method allows you to fetch more details from your API when\npresenting a specific asset, it returns a result object as described in\n=fetch=, and takes the id and the data returned by previous =fetch= calls as\nan argument.\n\nusually it's no more than:\n#+BEGIN_SRC javascript\nProvider.prototype.detail = function (torrent_id, old_data) {\n    return Q(old_data);\n};\n#+END_SRC\n\n*** extractIds ([Object]: items -> [String])\nThis method is used to keep a cache of the content in a Butter app. The\ngeneric implementation is:\n\n#+BEGIN_SRC javascript\nProvider.prototype.extractIds = function (items) {\n    return _.pluck(items.results, this.config.uniqueId);\n};\n#+END_SRC\n\n*** (optional) resolveStream (src, config, data -> (promise) String)\nThis method is used to let the provider decide what the end url should be\nacording to some config passed by the apps. It's main purpose is to allow\nthe selection of different languages, but in the future it may allow for\ndeeper customizations (as for instance choosing a streaming technology).\n\nthe default handler will just return =src= that is the legacy value\nproviders are required to return in =fetch= and =details= for torrent data.\n\ncurrently =config= will have this shape:\n#+BEGIN_SRC javascript\n{\n   audio: String,\n}\n#+END_SRC\n\n=data= will be whatever data was returned from the latest =fetch= or\n=details= for the current media, it is given raw so that you can control\nwhere to 'hide' the urls you will want to switch on languages switches.\n\n*** (optional) random (void -> (promise) Object)\nreturn a random =result item= as described in =fetch=\n\n*** (optional) update (void -> (promise) [Object])\nallows Butter to notify the Provider it can update it's internal cache\n(not used)\n",
  "readmeFilename": "README.org",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/butterproviders/butter-provider.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.4.0"
}
